//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormCreate(TObject *Sender)
{
   nomArch="alumnos.dat";
   pf=new fstream(nomArch.c_str(),ios::in|ios::binary);
   if(pf->fail())
   {
	   pf=new fstream(nomArch.c_str(),ios::out|ios::binary);
   }
   pf->close();
   delete(pf);
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Edit1Exit(TObject *Sender)
{
	RegAlumno reg;
	Boolean habilitar=false;
	Word codi=StrToInt(Edit1->Text);
	pf=new fstream(nomArch.c_str(),ios::in|ios::binary) ;
	if(!pf->fail())
	{
		 while(!pf->eof()&&!habilitar)
		 {
			 pf->read((char *)&reg,sizeof(reg));
			 if(!pf->eof())
			 {
				 habilitar=codi==reg.codigo;
			 }
		 }
		 if(habilitar)
		 {
		   Edit2->Text=reg.nombre;
		   Edit3->Text=reg.direccion;
		   MaskEdit1->Text=IntToStr(reg.fecha.dia)+"/"+IntToStr(reg.fecha.mes)+"/"+IntToStr(reg.fecha.año);
		 }
		 else
		 {
			 Edit2->Text="";
			 Edit3->Text="";
			 MaskEdit1->Text="";
         }
	}
	pf->close();
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)
{
	RegAlumno reg,regNuevo;
	bool hallado=false;
	AnsiString aux;
	regNuevo.codigo=StrToInt(Edit1->Text);
	 aux=Edit2->Text;
	strcpy(regNuevo.nombre,aux.c_str());
	aux=Edit3->Text;
	strcpy(regNuevo.direccion,aux.c_str());
	aux=MaskEdit1->Text;
	regNuevo.fecha.dia=StrToInt(aux.SubString(1,2));
	regNuevo.fecha.mes=StrToInt(aux.SubString(4,2));
	regNuevo.fecha.año=StrToInt(aux.SubString(7,4));
	pf=new fstream(nomArch.c_str(),ios::in|ios::out|ios::binary);  //esto nos permite leer y escribir si lo utilizamos pero no ambos a la vez
	if(!pf->fail())
	{
		while(!pf->eof()&&!hallado)
		{
			pf->read((char *)&reg,sizeof(reg));
			if(!pf->eof())
			{
				hallado=reg.codigo==regNuevo.codigo;
			}
		}
		if(hallado)      //actualizar
		{
			pf->seekg(-sizeof(reg),ios::cur);
			pf->write((char *)&regNuevo,sizeof(regNuevo));

		}
		else         //agregar
		{
		  pf=new fstream(nomArch.c_str(),ios::app|ios::binary);
		  pf->write((char*)&regNuevo,sizeof(regNuevo));
		}

		pf->close();
		delete(pf);


		Edit1->Text="";
		Edit2->Text="";
		Edit3->Text="";
		MaskEdit1->Text="";
		Edit1->SetFocus();
	}
}
//---------------------------------------------------------------------------
   void Mayuscula(char v[])
   {
	  for (int i = 1; i <=strlen(v); i++) {
		 v[i]=toupper(v[i]);
	  }
   }


void __fastcall TForm1::Button3Click(TObject *Sender)
{
   RegAlumno reg,regN;
	   fstream fi(nomArch.c_str(),ios::in|ios::binary);
	   fstream fo("temporal.tmp",ios::out|ios::binary);
	   if(!fi.fail())
	   {
		   while(!fi.eof())
		   {
			   pf->read((char *)&reg,sizeof(reg));
			   if(!fi.eof())
			   {
				  regN.codigo=reg.codigo;
				  Mayuscula(reg.nombre);
				  strcpy(regN.nombre,reg.nombre); //reg.nombre=reg2.nombre;
				  strcpy(regN.direccion,reg.direccion);
				  regN.fecha= reg.fecha;
				  fo.write((char *)&regN,sizeof(regN));
               }
		   }
	   }
       fi.close();
	   fo.close();
	   remove(nomArch.c_str());
	   rename("temporal.tmp",nomArch.c_str());
}
//---------------------------------------------------------------------------

