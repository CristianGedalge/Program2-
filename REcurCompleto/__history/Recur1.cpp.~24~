//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Recur1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
byte SumaDig(Cardinal x)
{
  byte s;
  if(x<10) //caso  base
  {
	s=x;
  }
  else      // caso general
	s=x%10+SumaDig(x/10);
  return s;
}


void __fastcall TForm1::SumaDigitos1Click(TObject *Sender)
{
  Edit2->Text=SumaDig(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------
byte SumDigPrim(Cardinal x)
{
  byte s;
  if(x<10)
  {
	if(x==2||x==3||x==5||x==7)
	  s=x;
  }
  else
  {
	byte r=x%10;
	if(r==2||r==3||r==5||r==7)
	{
	  s=r+SumDigPrim(x/10);
	}
	else
	  s=SumDigPrim(x/10);
  }
  return s;
}

void __fastcall TForm1::SumaDigPrimos1Click(TObject *Sender)
{
  Edit2->Text=SumDigPrim(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------



byte menor(Cardinal x)
{
  byte s;
  if(x<10)
	s=x;
  else
  {
	if( menor(x/10)<x%10)
	  s=menor(x/10);
	else
	  s=x%10;
  }
  return s;
}

void __fastcall TForm1::MenorDig1Click(TObject *Sender)
{
  Edit2->Text=menor(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------
void MenorAlfinal(Cardinal &x)
{
  if(x<10) //caso base n=1;
  {
  }
  else
  {
	byte a=x%10;
	x=x/10;
	MenorAlfinal(x);
	byte b=x%10;
	if(a<=b)
	{
	  x=x*10+a;
	}
	else
	{
	  b=x%10;
	  x=x/10;
	  x=x*10+a;
	  x=x*10+b;
	}
  }
}




/*void menorfinal(Cardinal &x)
{
  if(x<10)
  {
  }
  else
  {
	byte a=x%10;

	x=x/10;
	menorfinal(x);
	byte b=x%10;

	if(a<=b)
	{
	   x= x*10+a;
	}
	else
	{
	  x=x/10;
	  x=x*10+a;
	  x=x*10+b;

	}
  }
}
*/


void __fastcall TForm1::MenorAlFinal1Click(TObject *Sender)
{
  Cardinal z=StrToInt(Edit1->Text);
  MenorAlfinal(z);
  Edit1->Text=z;
}
//---------------------------------------------------------------------------
void OrdenarMayaMen(Cardinal &x){
  if(x>10)
  {
	MenorAlfinal(x);
	byte a=x%10;
	x=x/10;
	OrdenarMayaMen(x);
	x=x*10+a;
  }
}
void __fastcall TForm1::OrdenarMayaMen1Click(TObject *Sender)
{
  Cardinal z=StrToInt(Edit1->Text);
  OrdenarMayaMen(z) ;
  Edit1->Text=z ;
}
//---------------------------------------------------------------------------


byte Sumapares(Cardinal x)
{
byte s;
  if(x<10)
  {
	if(x%2==0)
	  s=x;
	else
	  s=0;
  }
  else
  {
	byte a=x%10;
	if(x%2==0)
	{
	  s=Sumapares(x/10)+a;
	}
	else
	  s=Sumapares(x/10);
  }
  return s;
}

void __fastcall TForm1::SumaDig1Click(TObject *Sender)
{
   Edit2->Text=Sumapares(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------
byte SumaImp(Cardinal x)
{
  byte s;
  if(x<10)
  {
	if(x%1!=0)
	  s=x;
	else
	  s=0;
  }
  else
  {
	byte a =x%10;
	if(a%2!=0)
	  s=SumaImp(x/10)+a;
	else
	  s=SumaImp(x/10);
  }
  return s;

}
void __fastcall TForm1::SumaDigImpar1Click(TObject *Sender)
{
  Edit2->Text=SumaImp(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------
void MayorAlFinal(Cardinal &x)     //143
{
  if(x>=10)
  {
	byte a=x%10;
	x=x/10;
	MayorAlFinal(x);
	byte b=x%10;
	if(a>=b)
	  x=x*10+a;
	else
	{
	  x=x/10;
	  x=x*10+a;
	  x=x*10+b;
	}
  }
}

void __fastcall TForm1::MayorAlFinal1Click(TObject *Sender)
{
  Cardinal z=StrToInt(Edit1->Text);
  MayorAlFinal(z);
  Edit1->Text=z;
}
//---------------------------------------------------------------------------
void OrdenarMenaMay(Cardinal &x)
{
  if(x>=10)
  {
	MayorAlFinal(x);
	byte a=x%10;
	x=x/10;
	OrdenarMenaMay(x);
	x=x*10+a;
  }
}


void __fastcall TForm1::OrdenarMenaMay1Click(TObject *Sender)
{
  Cardinal z=StrToInt(Edit1->Text);
  OrdenarMenaMay(z);
  Edit1->Text=z;
}
//---------------------------------------------------------------------------
bool IsVowel(char n)
{
  String vow="aeiouAEIOUáéíóúÁÉÍÓÚüÜöÖ";
  return vow.Pos(n)>0;

}
byte CantVowels(String x)
{

  byte c;
  if(x=="")
	c=0;
  else
  {
	char n=x[1];
	x.Delete(1,1);
	c = CantVowels(x);
	if(IsVowel(n))
	  c++;
  }
  return c;
}
void __fastcall TForm1::Cant1Click(TObject *Sender)
{
  Edit2->Text=CantVowels(Edit1->Text);
}
//---------------------------------------------------------------------------
String Inverso1(String x)
{
  String s="";
  if(x=="")
  {

  }
  else
  {
	char a=x[1];
	x.Delete(1,1);
	s=Inverso1(x);
	s=s+a;
  }
  return s;
}
void __fastcall TForm1::Inverso11Click(TObject *Sender)
{
  Edit2->Text=Inverso1(Edit1->Text);
}
//---------------------------------------------------------------------------
String Inverso2(String x)      //po
{
  Byte lg=x.Length();
  String s="";
  if(lg>0)
  {
	Char a=x[lg];   //o
	x.Delete(lg,1); //po
	s=AnsiString(a)+Inverso2(x);
  }
  return s;
}
void __fastcall TForm1::Inverso21Click(TObject *Sender)
{
  Edit2->Text=Inverso2(Edit1->Text);
}
//---------------------------------------------------------------------------
String Inverso3(String x)   // 2 1eros elemts de la cadena
{
  String s;
  byte lg= x.Length();
  if(lg<2)
	s=x;
  else
  {
	String r=x.SubString(1,2);     //pollo
	x.Delete(1,2);
	s=Inverso3(x);
	s= s + r[2]+r[1];
  }
  return s;
}

void __fastcall TForm1::Inverso31Click(TObject *Sender)
{
  Edit2->Text=Inverso3(Edit1->Text);
}
//---------------------------------------------------------------------------
String Inverso4(String x)         // 2 last elemts of the String
{
  byte n=x.Length();
  String s;
  if(n<2)
	s=x;
  else
  {
	String r=x.SubString(n-1,2);
	x.Delete(n-1,2);
	s=Inverso4(x);
	s= AnsiString(r[2])+AnsiString(r[1])+s;
  }
  /*String s="";
  String t="pollo";
  String r=t+s;
  return r;  --->F*/
  return s;
}
void __fastcall TForm1::Inverso41Click(TObject *Sender)
{
  Edit2->Text=Inverso4(Edit1->Text);
}
//---------------------------------------------------------------------------
String Inverso5(String x)
{
  String s;
  byte n=x.Length();
  if(n<2)
  {
	s=x;
  }
  else
  {
	char a1=x[1];
	char a2=x[n];
	x.Delete(n,1);
	x.Delete(1,1);
	s=AnsiString(a2)+Inverso5(x)+a1;//ojo se anota ansi si no es s tal vez
  }
  return s;
}
void __fastcall TForm1::Inverso51Click(TObject *Sender)
{
  Edit2->Text=Inverso5(Edit1->Text);
}
//---------------------------------------------------------------------------
String Inverso6(String x)           //menor de la derecha
{
  byte n=x.Length();
  String s;
  if(n<2)
  {
	s=x;
  }
  else
  {
	String a=x.SubString(n-n/2+1,n/2);//o
	x.Delete(n-n/2+1,n/2);
	s=Inverso6(a)+Inverso6(x);

  }
  return s;
}
void __fastcall TForm1::Inverso61Click(TObject *Sender)
{
  Edit2->Text=Inverso6(Edit1->Text);
}
//---------------------------------------------------------------------------
String Inverso7(String x)                     //cadena impar menor cant elemt de la izq;
{                                             //  "  "  par  mitad  de elemt de la cadena parte izq
  byte lg=x.Length();
  String s;
  if(lg<2)
  {
   s=x;
  }
  else
  {
	String a=x.SubString(1,lg/2);
	x.Delete(1,lg/2);
	s=Inverso7(x)+Inverso7(a);
  }
  return s;
}
void __fastcall TForm1::Inverso71Click(TObject *Sender)
{
  Edit2->Text=Inverso7(Edit1->Text);
}
//---------------------------------------------------------------------------
bool IsAlphabet(AnsiString x)
{

  String s="abcdefghijklmnñopqrstuvwxyzABCDEFGHIJKLMNÑOPQRSTUVWXYZÜÖöüÓÍÉÁáéíóú";
  /*if(s.Pos(x)>0)
	r=1;
  else
	r=0; */
  return (s.Pos(x)>0);//?1:0;
}
void __fastcall TForm1::EsAlfabetochar1Click(TObject *Sender)
{
  String  s;
  if(IsAlphabet(Edit1->Text))
	s="True";
  else
	s="False";
  Edit2->Text=s;
}
//---------------------------------------------------------------------------
void EliminarNoAlphabeto (String &x)        //procedimiento
{
	if(x=="")
	{
	 x="";
	}
	else
	{
	  char a=x[1];
	  x.Delete(1,1);
	  EliminarNoAlphabeto(x);
	  if(IsAlphabet(a)|| a==' ')             //char 1 comilla
		x= String(a)+x;
	}
}

void __fastcall TForm1::EliminarNoLetras1Click(TObject *Sender)
{
  String z=Edit1->Text;
  EliminarNoAlphabeto(z);
  Edit2->Text=z;
}
//---------------------------------------------------------------------------
int sumaelemts(TStringGrid *v,byte n)
{
  int s;
  if(n==0)
	s=0;
  else
	s=sumaelemts(v,n-1)+StrToInt(v->Cells[n-1][0]);
  return s;
}
void __fastcall TForm1::SumadeElementos1Click(TObject *Sender)
{
  Edit2->Text=sumaelemts(StringGrid1,StringGrid1->ColCount);

}
//---------------------------------------------------------------------------

//

void CargarRandom(TStringGrid *v,byte n)
{
  if(n==0)
	v->ColCount=0;
  else
  {
	 //CargarRandom(v,n-1);
	 v->Cells[n-1][0]=Random(20);
	 CargarRandom(v,n-1);
	 v->ColCount=n;
	//CargarRandom(,n-1)
  }
}

void __fastcall TForm1::CargarRandom1Click(TObject *Sender)
{
  CargarRandom(StringGrid1,StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------


void __fastcall TForm1::Dimensionar1Click(TObject *Sender)
{
 StringGrid1->ColCount=StrToInt(Edit1->Text);
}
//---------------------------------------------------------------------------
int suma2v(TStringGrid *v,byte a,byte lg)       //
{
  int s;
  byte n=lg-a+1;
  if(n==0)
	s=0;
  else
	s=suma2v(v,a+1,lg)+StrToInt(v->Cells[a][0]);
  return s;
}
void __fastcall TForm1::SumadeElem21Click(TObject *Sender)
{
  Edit2->Text=suma2v(StringGrid1,0,StringGrid1->ColCount-1);
}
//---------------------------------------------------------------------------

int suma3(TStringGrid *v,byte a,byte n)    //123
{
  int s;
  if(n==0)
	s=0;
  else if(n==1)
	s=StrToInt(v->Cells[a][0]);
  else
  {
	 byte n1=n/2;
	 byte p=a+n/2;
	 byte n2=n-n1;
	 s=suma3(v,a,n1) +suma3(v,p,n2);
  }
  return s;
}

void __fastcall TForm1::SumadeElem31Click(TObject *Sender)
{
  Edit2->Text=suma3(StringGrid1,0,StringGrid1->ColCount);
}
//---------------------------------------------------------------------------
bool BusqBina(TStringGrid *v,byte a ,byte b,byte x) //a=0    b=4    n=5
{                                                   //pos.i  pos.f  tamaño
  byte n=b-a+1;
  bool bandera;
  if(n==0)
  {
	bandera=false;
  }
  else if(n==1)
	bandera= (x==StrToInt(v->Cells[a][0]));
  else
  {
	byte a1=(a+b)/2;
	if(x==StrToInt(v->Cells[a1][0]))
	  bandera=true;
	else
	{
	  if(x>StrToInt(v->Cells[a1][0]))
		 bandera =BusqBina(v,a1+1,b,x);
	  else
		 bandera =BusqBina(v,a,a1-1,x);
	}
  }
  return bandera;
}
void __fastcall TForm1::BusquedaBinaria1Click(TObject *Sender)
{
  if(BusqBina(StringGrid1,0,StringGrid1->ColCount-1,Edit2->Text.ToInt()))
	Edit3->Text="Si está";
  else
	Edit3->Text ="No está" ;
}
//---------------------------------------------------------------------------
bool VerifEstaOrden(TStringGrid *v,byte n)
{
  bool bandera;
  if(n==1)
	bandera=true;
  else
  {
	if(StrToInt(v->Cells[n-2][0])<=StrToInt(v->Cells[n-1][0]))
	  bandera=VerifEstaOrden(v,n-1);
	else
	  bandera=false;
  }
  return bandera;
}


void __fastcall TForm1::Verificarsiestaordenado1Click(TObject *Sender)
{
  if(VerifEstaOrden(StringGrid1 , StringGrid1->ColCount))
	Edit3->Text="Esta en Orden";
  else
	Edit3->Text="NoEsta en Orden";

}
//---------------------------------------------------------------------------

void LLevarMayorAlFinal(TStringGrid *v,byte n)

{
  if(n>1)
  {
	byte v1=StrToInt(v->Cells[n-1][0]);
	LLevarMayorAlFinal(v,n-1);

	if( StrToInt(v->Cells[n-2][0])>StrToInt(v->Cells[n-1][0]))
	{
	  v->Cells[n-1][0]=v->Cells[n-2][0];
	  v->Cells[n-2][0]=v1;
	}
  }
}
void BubbleSort(TStringGrid *v, byte n)
{
  if(n>1)
  {
	  LLevarMayorAlFinal(v,n);
	  BubbleSort(v,n-1);

  }
}

void __fastcall TForm1::BubbleSort1Click(TObject *Sender)
{
  BubbleSort(StringGrid1,StringGrid1->ColCount);
  //LLevarMayorAlFinal(StringGrid1,StringGrid1->ColCount);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::SelectSort1Click(TObject *Sender)
{
  Edit2->Text=20;//hay un metodo nuevo no lo hice por que no tenia tiempo
}
//---------------------------------------------------------------------------
String Num(TStringGrid *v,byte n)
{
 String s;
 if(n==1)
   s=v->Cells[0][0];
 else
 {
	s= Num(v,n-1) +v->Cells[n-1][0];
 }
 return s;
}
void __fastcall TForm1::VectoraNum1Click(TObject *Sender)
{
  String s=Num(StringGrid1,StringGrid1->ColCount);
  if(Num(StringGrid1, StringGrid1->ColCount)=="")
	Edit1->Text="";
  else
	Edit1->Text= StrToInt(s);
}

//v[1,23,4] =1234
//v[]="";
//---------------------------------------------------------------------------
void NumAVector(TStringGrid *v,Cardinal num,byte n)
{
  if(num>100)
  {
	v->Cells[n-1][0]=num%100;
	NumAVector(v,num/100,n-1);
  }
  else
  {
	  v->Cells[0][0]=num;
  }
}
void __fastcall TForm1::NumaVector1Click(TObject *Sender)
{
  String c=StrToInt(Edit1->Text);
  StringGrid1->ColCount= (c.Length()+1)/2;
  NumAVector(StringGrid1,Edit1->Text.ToInt(),StringGrid1->ColCount);
}

//41231 de 2 en dos=v[4,12,31]
//---------------------------------------------------------------------------
void InsertNumVec(TStringGrid *v,byte &n,byte x)                //[2] x=3 =>[3,2]
{
  if(n==0)                                                      // [2] x=1 =>[2 1]
  {
	v->Cells[0][0]=x;
	n=1;
  }
  else
  {
	if(x>=StrToInt(v->Cells[n-1][0]))
	{
	  byte aux= StrToInt(v->Cells[n-1][0]);
	  n--;
	  InsertNumVec(v,n,x);
	  v->Cells[n][0]=aux;
	  n++;
	}
	else
	{
	  v->Cells[n][0]=x;
	  n++;
	}
  }
}
void __fastcall TForm1::Insertar1Click(TObject *Sender)
{
  byte n=StringGrid1->ColCount;
  InsertNumVec(StringGrid1,n,Edit1->Text.ToInt());
  StringGrid1->ColCount=n;
  //v[6,3,1]  5 ->v[6,5,3,1]
  //v[]  2 ->Nofunciona para vector vacio
  //v[1] 5 ->v[5,1]
  //ojo solo funciona con vectores descendentes

}
//---------------------------------------------------------------------------
/*void InsertarVectorPos(TStringGrid *v,byte &n,byte pos,byte num){
	if(n>pos){
	Cardinal aux = StrToInt(v->Cells[n-1][0]);
		n--;
		InsertarVectorPos(v,n,pos,num);
		n++;
		v->Cells[n-1][0]=aux;
	}
	else{
		n++;
		v->Cells[n-1][0] = num;
	}
}
void __fastcall TForm2::InsertarendichaPossms1Click(TObject *Sender)
{
	byte num = StrToInt(InputBox("","Numero: ",""));
	byte pos = StrToInt(InputBox("","Posicion a insertar: ",""));
	byte n = StrToInt(StringGrid1->ColCount);
	InsertarVectorPos(StringGrid1,n,pos,num);
	StringGrid1->ColCount = n;
	//  Ej: v[3,5,2,1,8]   num = 4 ; pos = 2
	//	 => v[3,5,4,2,1,8]
}*/

void __fastcall TForm1::Dimensionar2Click(TObject *Sender)
{
   StringGrid2->RowCount=StrToInt(Edit1->Text);
   StringGrid2->ColCount = StrToInt(Edit2->Text);
}
//---------------------------------------------------------------------------

void CargFila(TStringGrid *m,byte f,byte c)
{
  if(c==0)
  {
	m->ColCount=c ;
  }
  else
  {
	m->Cells[c-1][f]=Random(10);
	CargFila(m,f,c-1);
  }
}
void CargRand(TStringGrid *m,byte f,byte c)
{
  if(f==0)
  {
	  m->ColCount=c;
	  m->RowCount=f;
  }
  else
  {
	f--;
	CargRand(m,f,c);
	CargFila( m,f,c);
  }
}

void __fastcall TForm1::SumadeElem1Click(TObject *Sender)
{
  byte f=Edit1->Text.ToInt();
  byte c=Edit2->Text.ToInt();
  CargRand(StringGrid2,f,c);
  StringGrid2->ColCount=c;
  StringGrid2->RowCount=f;
}
//---------------------------------------------------------------------------

